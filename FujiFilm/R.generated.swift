//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try font.validate()
    try intern.validate()
  }
  
  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `SIL Open Font License.txt`.
    static let silOpenFontLicenseTxt = Rswift.FileResource(bundle: R.hostingBundle, name: "SIL Open Font License", pathExtension: "txt")
    
    /// `bundle.url(forResource: "SIL Open Font License", withExtension: "txt")`
    static func silOpenFontLicenseTxt(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.silOpenFontLicenseTxt
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 18 fonts.
  struct font: Rswift.Validatable {
    /// Font `Raleway-BlackItalic`.
    static let ralewayBlackItalic = Rswift.FontResource(fontName: "Raleway-BlackItalic")
    /// Font `Raleway-Black`.
    static let ralewayBlack = Rswift.FontResource(fontName: "Raleway-Black")
    /// Font `Raleway-BoldItalic`.
    static let ralewayBoldItalic = Rswift.FontResource(fontName: "Raleway-BoldItalic")
    /// Font `Raleway-Bold`.
    static let ralewayBold = Rswift.FontResource(fontName: "Raleway-Bold")
    /// Font `Raleway-ExtraBoldItalic`.
    static let ralewayExtraBoldItalic = Rswift.FontResource(fontName: "Raleway-ExtraBoldItalic")
    /// Font `Raleway-ExtraBold`.
    static let ralewayExtraBold = Rswift.FontResource(fontName: "Raleway-ExtraBold")
    /// Font `Raleway-ExtraLightItalic`.
    static let ralewayExtraLightItalic = Rswift.FontResource(fontName: "Raleway-ExtraLightItalic")
    /// Font `Raleway-ExtraLight`.
    static let ralewayExtraLight = Rswift.FontResource(fontName: "Raleway-ExtraLight")
    /// Font `Raleway-Italic`.
    static let ralewayItalic = Rswift.FontResource(fontName: "Raleway-Italic")
    /// Font `Raleway-LightItalic`.
    static let ralewayLightItalic = Rswift.FontResource(fontName: "Raleway-LightItalic")
    /// Font `Raleway-Light`.
    static let ralewayLight = Rswift.FontResource(fontName: "Raleway-Light")
    /// Font `Raleway-MediumItalic`.
    static let ralewayMediumItalic = Rswift.FontResource(fontName: "Raleway-MediumItalic")
    /// Font `Raleway-Medium`.
    static let ralewayMedium = Rswift.FontResource(fontName: "Raleway-Medium")
    /// Font `Raleway-Regular`.
    static let ralewayRegular = Rswift.FontResource(fontName: "Raleway-Regular")
    /// Font `Raleway-SemiBoldItalic`.
    static let ralewaySemiBoldItalic = Rswift.FontResource(fontName: "Raleway-SemiBoldItalic")
    /// Font `Raleway-SemiBold`.
    static let ralewaySemiBold = Rswift.FontResource(fontName: "Raleway-SemiBold")
    /// Font `Raleway-ThinItalic`.
    static let ralewayThinItalic = Rswift.FontResource(fontName: "Raleway-ThinItalic")
    /// Font `Raleway-Thin`.
    static let ralewayThin = Rswift.FontResource(fontName: "Raleway-Thin")
    
    /// `UIFont(name: "Raleway-Black", size: ...)`
    static func ralewayBlack(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: ralewayBlack, size: size)
    }
    
    /// `UIFont(name: "Raleway-BlackItalic", size: ...)`
    static func ralewayBlackItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: ralewayBlackItalic, size: size)
    }
    
    /// `UIFont(name: "Raleway-Bold", size: ...)`
    static func ralewayBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: ralewayBold, size: size)
    }
    
    /// `UIFont(name: "Raleway-BoldItalic", size: ...)`
    static func ralewayBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: ralewayBoldItalic, size: size)
    }
    
    /// `UIFont(name: "Raleway-ExtraBold", size: ...)`
    static func ralewayExtraBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: ralewayExtraBold, size: size)
    }
    
    /// `UIFont(name: "Raleway-ExtraBoldItalic", size: ...)`
    static func ralewayExtraBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: ralewayExtraBoldItalic, size: size)
    }
    
    /// `UIFont(name: "Raleway-ExtraLight", size: ...)`
    static func ralewayExtraLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: ralewayExtraLight, size: size)
    }
    
    /// `UIFont(name: "Raleway-ExtraLightItalic", size: ...)`
    static func ralewayExtraLightItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: ralewayExtraLightItalic, size: size)
    }
    
    /// `UIFont(name: "Raleway-Italic", size: ...)`
    static func ralewayItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: ralewayItalic, size: size)
    }
    
    /// `UIFont(name: "Raleway-Light", size: ...)`
    static func ralewayLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: ralewayLight, size: size)
    }
    
    /// `UIFont(name: "Raleway-LightItalic", size: ...)`
    static func ralewayLightItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: ralewayLightItalic, size: size)
    }
    
    /// `UIFont(name: "Raleway-Medium", size: ...)`
    static func ralewayMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: ralewayMedium, size: size)
    }
    
    /// `UIFont(name: "Raleway-MediumItalic", size: ...)`
    static func ralewayMediumItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: ralewayMediumItalic, size: size)
    }
    
    /// `UIFont(name: "Raleway-Regular", size: ...)`
    static func ralewayRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: ralewayRegular, size: size)
    }
    
    /// `UIFont(name: "Raleway-SemiBold", size: ...)`
    static func ralewaySemiBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: ralewaySemiBold, size: size)
    }
    
    /// `UIFont(name: "Raleway-SemiBoldItalic", size: ...)`
    static func ralewaySemiBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: ralewaySemiBoldItalic, size: size)
    }
    
    /// `UIFont(name: "Raleway-Thin", size: ...)`
    static func ralewayThin(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: ralewayThin, size: size)
    }
    
    /// `UIFont(name: "Raleway-ThinItalic", size: ...)`
    static func ralewayThinItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: ralewayThinItalic, size: size)
    }
    
    static func validate() throws {
      if R.font.ralewayBlack(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Raleway-Black' could not be loaded, is 'Raleway-Black.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.ralewayBlackItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Raleway-BlackItalic' could not be loaded, is 'Raleway-BlackItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.ralewayBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Raleway-Bold' could not be loaded, is 'Raleway-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.ralewayBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Raleway-BoldItalic' could not be loaded, is 'Raleway-BoldItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.ralewayExtraBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Raleway-ExtraBold' could not be loaded, is 'Raleway-ExtraBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.ralewayExtraBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Raleway-ExtraBoldItalic' could not be loaded, is 'Raleway-ExtraBoldItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.ralewayExtraLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Raleway-ExtraLight' could not be loaded, is 'Raleway-ExtraLight.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.ralewayExtraLightItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Raleway-ExtraLightItalic' could not be loaded, is 'Raleway-ExtraLightItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.ralewayItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Raleway-Italic' could not be loaded, is 'Raleway-Italic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.ralewayLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Raleway-Light' could not be loaded, is 'Raleway-Light.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.ralewayLightItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Raleway-LightItalic' could not be loaded, is 'Raleway-LightItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.ralewayMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Raleway-Medium' could not be loaded, is 'Raleway-Medium.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.ralewayMediumItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Raleway-MediumItalic' could not be loaded, is 'Raleway-MediumItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.ralewayRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Raleway-Regular' could not be loaded, is 'Raleway-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.ralewaySemiBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Raleway-SemiBold' could not be loaded, is 'Raleway-SemiBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.ralewaySemiBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Raleway-SemiBoldItalic' could not be loaded, is 'Raleway-SemiBoldItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.ralewayThin(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Raleway-Thin' could not be loaded, is 'Raleway-Thin.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.ralewayThinItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Raleway-ThinItalic' could not be loaded, is 'Raleway-ThinItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 33 images.
  struct image {
    /// Image `Attendance-button`.
    static let attendanceButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "Attendance-button")
    /// Image `Courses`.
    static let courses = Rswift.ImageResource(bundle: R.hostingBundle, name: "Courses")
    /// Image `Logo-Black`.
    static let logoBlack = Rswift.ImageResource(bundle: R.hostingBundle, name: "Logo-Black")
    /// Image `Logo`.
    static let logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "Logo")
    /// Image `Scan`.
    static let scan = Rswift.ImageResource(bundle: R.hostingBundle, name: "Scan")
    /// Image `Search`.
    static let search = Rswift.ImageResource(bundle: R.hostingBundle, name: "Search")
    /// Image `Warranty-Search`.
    static let warrantySearch = Rswift.ImageResource(bundle: R.hostingBundle, name: "Warranty-Search")
    /// Image `Workshop_icon`.
    static let workshop_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "Workshop_icon")
    /// Image `arrow`.
    static let arrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow")
    /// Image `bg_image`.
    static let bg_image = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_image")
    /// Image `change_password_icon`.
    static let change_password_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "change_password_icon")
    /// Image `continue_arrow`.
    static let continue_arrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "continue_arrow")
    /// Image `dashboard_logo`.
    static let dashboard_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "dashboard_logo")
    /// Image `iconfinder_radio-button_off`.
    static let iconfinder_radioButton_off = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconfinder_radio-button_off")
    /// Image `iconfinder_radio-button_on_`.
    static let iconfinder_radioButton_on_ = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconfinder_radio-button_on_")
    /// Image `loan_program_icon`.
    static let loan_program_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "loan_program_icon")
    /// Image `loan_program_image`.
    static let loan_program_image = Rswift.ImageResource(bundle: R.hostingBundle, name: "loan_program_image")
    /// Image `login_logo`.
    static let login_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "login_logo")
    /// Image `logout_icon`.
    static let logout_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "logout_icon")
    /// Image `menu_logo`.
    static let menu_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "menu_logo")
    /// Image `menu`.
    static let menu = Rswift.ImageResource(bundle: R.hostingBundle, name: "menu")
    /// Image `scanner`.
    static let scanner = Rswift.ImageResource(bundle: R.hostingBundle, name: "scanner")
    /// Image `setting_icon`.
    static let setting_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "setting_icon")
    /// Image `small_scan`.
    static let small_scan = Rswift.ImageResource(bundle: R.hostingBundle, name: "small_scan")
    /// Image `splash_image`.
    static let splash_image = Rswift.ImageResource(bundle: R.hostingBundle, name: "splash_image")
    /// Image `splash_logo`.
    static let splash_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "splash_logo")
    /// Image `successfully_icon`.
    static let successfully_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "successfully_icon")
    /// Image `toggle_icon`.
    static let toggle_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "toggle_icon")
    /// Image `user_icon`.
    static let user_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "user_icon")
    /// Image `warranty_icon`.
    static let warranty_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "warranty_icon")
    /// Image `warranty_image`.
    static let warranty_image = Rswift.ImageResource(bundle: R.hostingBundle, name: "warranty_image")
    /// Image `workshop_image`.
    static let workshop_image = Rswift.ImageResource(bundle: R.hostingBundle, name: "workshop_image")
    /// Image `workshop_placeholder`.
    static let workshop_placeholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "workshop_placeholder")
    
    /// `UIImage(named: "Attendance-button", bundle: ..., traitCollection: ...)`
    static func attendanceButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.attendanceButton, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Courses", bundle: ..., traitCollection: ...)`
    static func courses(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.courses, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Logo", bundle: ..., traitCollection: ...)`
    static func logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Logo-Black", bundle: ..., traitCollection: ...)`
    static func logoBlack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logoBlack, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Scan", bundle: ..., traitCollection: ...)`
    static func scan(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.scan, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Search", bundle: ..., traitCollection: ...)`
    static func search(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.search, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Warranty-Search", bundle: ..., traitCollection: ...)`
    static func warrantySearch(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.warrantySearch, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Workshop_icon", bundle: ..., traitCollection: ...)`
    static func workshop_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.workshop_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "arrow", bundle: ..., traitCollection: ...)`
    static func arrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bg_image", bundle: ..., traitCollection: ...)`
    static func bg_image(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_image, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "change_password_icon", bundle: ..., traitCollection: ...)`
    static func change_password_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.change_password_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "continue_arrow", bundle: ..., traitCollection: ...)`
    static func continue_arrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.continue_arrow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "dashboard_logo", bundle: ..., traitCollection: ...)`
    static func dashboard_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dashboard_logo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "iconfinder_radio-button_off", bundle: ..., traitCollection: ...)`
    static func iconfinder_radioButton_off(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconfinder_radioButton_off, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "iconfinder_radio-button_on_", bundle: ..., traitCollection: ...)`
    static func iconfinder_radioButton_on_(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconfinder_radioButton_on_, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "loan_program_icon", bundle: ..., traitCollection: ...)`
    static func loan_program_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.loan_program_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "loan_program_image", bundle: ..., traitCollection: ...)`
    static func loan_program_image(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.loan_program_image, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "login_logo", bundle: ..., traitCollection: ...)`
    static func login_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.login_logo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "logout_icon", bundle: ..., traitCollection: ...)`
    static func logout_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logout_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "menu", bundle: ..., traitCollection: ...)`
    static func menu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "menu_logo", bundle: ..., traitCollection: ...)`
    static func menu_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu_logo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "scanner", bundle: ..., traitCollection: ...)`
    static func scanner(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.scanner, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "setting_icon", bundle: ..., traitCollection: ...)`
    static func setting_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.setting_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "small_scan", bundle: ..., traitCollection: ...)`
    static func small_scan(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.small_scan, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "splash_image", bundle: ..., traitCollection: ...)`
    static func splash_image(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.splash_image, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "splash_logo", bundle: ..., traitCollection: ...)`
    static func splash_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.splash_logo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "successfully_icon", bundle: ..., traitCollection: ...)`
    static func successfully_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.successfully_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "toggle_icon", bundle: ..., traitCollection: ...)`
    static func toggle_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.toggle_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "user_icon", bundle: ..., traitCollection: ...)`
    static func user_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.user_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "warranty_icon", bundle: ..., traitCollection: ...)`
    static func warranty_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.warranty_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "warranty_image", bundle: ..., traitCollection: ...)`
    static func warranty_image(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.warranty_image, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "workshop_image", bundle: ..., traitCollection: ...)`
    static func workshop_image(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.workshop_image, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "workshop_placeholder", bundle: ..., traitCollection: ...)`
    static func workshop_placeholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.workshop_placeholder, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 7 nibs.
  struct nib {
    /// Nib `AttendenceCell`.
    static let attendenceCell = _R.nib._AttendenceCell()
    /// Nib `CoursesCell`.
    static let coursesCell = _R.nib._CoursesCell()
    /// Nib `DashboardCell`.
    static let dashboardCell = _R.nib._DashboardCell()
    /// Nib `FujiFilmLeftMenuCell`.
    static let fujiFilmLeftMenuCell = _R.nib._FujiFilmLeftMenuCell()
    /// Nib `ProductWarrantyCell`.
    static let productWarrantyCell = _R.nib._ProductWarrantyCell()
    /// Nib `WarrantyCell`.
    static let warrantyCell = _R.nib._WarrantyCell()
    /// Nib `WorkshopCell`.
    static let workshopCell = _R.nib._WorkshopCell()
    
    /// `UINib(name: "AttendenceCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.attendenceCell) instead")
    static func attendenceCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.attendenceCell)
    }
    
    /// `UINib(name: "CoursesCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.coursesCell) instead")
    static func coursesCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.coursesCell)
    }
    
    /// `UINib(name: "DashboardCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.dashboardCell) instead")
    static func dashboardCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.dashboardCell)
    }
    
    /// `UINib(name: "FujiFilmLeftMenuCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.fujiFilmLeftMenuCell) instead")
    static func fujiFilmLeftMenuCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.fujiFilmLeftMenuCell)
    }
    
    /// `UINib(name: "ProductWarrantyCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.productWarrantyCell) instead")
    static func productWarrantyCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.productWarrantyCell)
    }
    
    /// `UINib(name: "WarrantyCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.warrantyCell) instead")
    static func warrantyCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.warrantyCell)
    }
    
    /// `UINib(name: "WorkshopCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.workshopCell) instead")
    static func workshopCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.workshopCell)
    }
    
    static func attendenceCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AttendenceCell? {
      return R.nib.attendenceCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AttendenceCell
    }
    
    static func coursesCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CoursesCell? {
      return R.nib.coursesCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CoursesCell
    }
    
    static func dashboardCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DashboardCell? {
      return R.nib.dashboardCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DashboardCell
    }
    
    static func fujiFilmLeftMenuCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FujiFilmLeftMenuCell? {
      return R.nib.fujiFilmLeftMenuCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FujiFilmLeftMenuCell
    }
    
    static func productWarrantyCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProductWarrantyCell? {
      return R.nib.productWarrantyCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProductWarrantyCell
    }
    
    static func warrantyCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WarrantyCell? {
      return R.nib.warrantyCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WarrantyCell
    }
    
    static func workshopCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WorkshopCell? {
      return R.nib.workshopCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WorkshopCell
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 1 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `CoursesCell`.
    static let coursesCell: Rswift.ReuseIdentifier<CoursesCell> = Rswift.ReuseIdentifier(identifier: "CoursesCell")
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 14 storyboards.
  struct storyboard {
    /// Storyboard `Attendence`.
    static let attendence = _R.storyboard.attendence()
    /// Storyboard `Courses`.
    static let courses = _R.storyboard.courses()
    /// Storyboard `Dashboard`.
    static let dashboard = _R.storyboard.dashboard()
    /// Storyboard `ForgotPassword`.
    static let forgotPassword = _R.storyboard.forgotPassword()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `LeftMenu`.
    static let leftMenu = _R.storyboard.leftMenu()
    /// Storyboard `Login`.
    static let login = _R.storyboard.login()
    /// Storyboard `ProductDetails`.
    static let productDetails = _R.storyboard.productDetails()
    /// Storyboard `QRScanResult`.
    static let qrScanResult = _R.storyboard.qrScanResult()
    /// Storyboard `Splash`.
    static let splash = _R.storyboard.splash()
    /// Storyboard `WarrantySearchResult`.
    static let warrantySearchResult = _R.storyboard.warrantySearchResult()
    /// Storyboard `WarrantySearch`.
    static let warrantySearch = _R.storyboard.warrantySearch()
    /// Storyboard `Warranty`.
    static let warranty = _R.storyboard.warranty()
    /// Storyboard `Workshop`.
    static let workshop = _R.storyboard.workshop()
    
    /// `UIStoryboard(name: "Attendence", bundle: ...)`
    static func attendence(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.attendence)
    }
    
    /// `UIStoryboard(name: "Courses", bundle: ...)`
    static func courses(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.courses)
    }
    
    /// `UIStoryboard(name: "Dashboard", bundle: ...)`
    static func dashboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.dashboard)
    }
    
    /// `UIStoryboard(name: "ForgotPassword", bundle: ...)`
    static func forgotPassword(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.forgotPassword)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "LeftMenu", bundle: ...)`
    static func leftMenu(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.leftMenu)
    }
    
    /// `UIStoryboard(name: "Login", bundle: ...)`
    static func login(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.login)
    }
    
    /// `UIStoryboard(name: "ProductDetails", bundle: ...)`
    static func productDetails(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.productDetails)
    }
    
    /// `UIStoryboard(name: "QRScanResult", bundle: ...)`
    static func qrScanResult(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.qrScanResult)
    }
    
    /// `UIStoryboard(name: "Splash", bundle: ...)`
    static func splash(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.splash)
    }
    
    /// `UIStoryboard(name: "Warranty", bundle: ...)`
    static func warranty(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.warranty)
    }
    
    /// `UIStoryboard(name: "WarrantySearch", bundle: ...)`
    static func warrantySearch(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.warrantySearch)
    }
    
    /// `UIStoryboard(name: "WarrantySearchResult", bundle: ...)`
    static func warrantySearchResult(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.warrantySearchResult)
    }
    
    /// `UIStoryboard(name: "Workshop", bundle: ...)`
    static func workshop(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.workshop)
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _CoursesCell.validate()
      try _DashboardCell.validate()
      try _WorkshopCell.validate()
    }
    
    struct _AttendenceCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "AttendenceCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AttendenceCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AttendenceCell
      }
      
      fileprivate init() {}
    }
    
    struct _CoursesCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = CoursesCell
      
      let bundle = R.hostingBundle
      let identifier = "CoursesCell"
      let name = "CoursesCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CoursesCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CoursesCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Attendance-button", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Attendance-button' is used in nib 'CoursesCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "workshop_placeholder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'workshop_placeholder' is used in nib 'CoursesCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _DashboardCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "DashboardCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DashboardCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DashboardCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "workshop_image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'workshop_image' is used in nib 'DashboardCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _FujiFilmLeftMenuCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "FujiFilmLeftMenuCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FujiFilmLeftMenuCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FujiFilmLeftMenuCell
      }
      
      fileprivate init() {}
    }
    
    struct _ProductWarrantyCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ProductWarrantyCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProductWarrantyCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProductWarrantyCell
      }
      
      fileprivate init() {}
    }
    
    struct _WarrantyCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "WarrantyCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WarrantyCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WarrantyCell
      }
      
      fileprivate init() {}
    }
    
    struct _WorkshopCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "WorkshopCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WorkshopCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WorkshopCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "small_scan", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'small_scan' is used in nib 'WorkshopCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "workshop_placeholder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'workshop_placeholder' is used in nib 'WorkshopCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try attendence.validate()
      try courses.validate()
      try dashboard.validate()
      try forgotPassword.validate()
      try launchScreen.validate()
      try leftMenu.validate()
      try login.validate()
      try productDetails.validate()
      try qrScanResult.validate()
      try splash.validate()
      try warranty.validate()
      try warrantySearch.validate()
      try warrantySearchResult.validate()
      try workshop.validate()
    }
    
    struct attendence: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = AttendenceViewController
      
      let attendenceViewController = StoryboardViewControllerResource<AttendenceViewController>(identifier: "AttendenceViewController")
      let bundle = R.hostingBundle
      let name = "Attendence"
      
      func attendenceViewController(_: Void = ()) -> AttendenceViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: attendenceViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.attendence().attendenceViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'attendenceViewController' could not be loaded from storyboard 'Attendence' as 'AttendenceViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct courses: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = CoursesViewController
      
      let bundle = R.hostingBundle
      let coursesViewController = StoryboardViewControllerResource<CoursesViewController>(identifier: "CoursesViewController")
      let name = "Courses"
      
      func coursesViewController(_: Void = ()) -> CoursesViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: coursesViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.courses().coursesViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'coursesViewController' could not be loaded from storyboard 'Courses' as 'CoursesViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct dashboard: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = DashboardViewController
      
      let bundle = R.hostingBundle
      let dashboardViewController = StoryboardViewControllerResource<DashboardViewController>(identifier: "DashboardViewController")
      let name = "Dashboard"
      
      func dashboardViewController(_: Void = ()) -> DashboardViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: dashboardViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "bg_image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_image' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.dashboard().dashboardViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'dashboardViewController' could not be loaded from storyboard 'Dashboard' as 'DashboardViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct forgotPassword: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = ForgotPasswordViewController
      
      let bundle = R.hostingBundle
      let forgotPasswordViewController = StoryboardViewControllerResource<ForgotPasswordViewController>(identifier: "ForgotPasswordViewController")
      let name = "ForgotPassword"
      
      func forgotPasswordViewController(_: Void = ()) -> ForgotPasswordViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: forgotPasswordViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Logo-Black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Logo-Black' is used in storyboard 'ForgotPassword', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.forgotPassword().forgotPasswordViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'forgotPasswordViewController' could not be loaded from storyboard 'ForgotPassword' as 'ForgotPasswordViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIKit.UIImage(named: "Logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Logo' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if UIKit.UIImage(named: "splash_image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'splash_image' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct leftMenu: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = LeftMenuViewController
      
      let bundle = R.hostingBundle
      let name = "LeftMenu"
      
      static func validate() throws {
        if UIKit.UIImage(named: "Logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Logo' is used in storyboard 'LeftMenu', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct login: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let loginViewController = StoryboardViewControllerResource<LoginViewController>(identifier: "LoginViewController")
      let name = "Login"
      
      func loginViewController(_: Void = ()) -> LoginViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loginViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Logo-Black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Logo-Black' is used in storyboard 'Login', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.login().loginViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loginViewController' could not be loaded from storyboard 'Login' as 'LoginViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct productDetails: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = ProductDetailsController
      
      let bundle = R.hostingBundle
      let name = "ProductDetails"
      let productDetailsController = StoryboardViewControllerResource<ProductDetailsController>(identifier: "ProductDetailsController")
      
      func productDetailsController(_: Void = ()) -> ProductDetailsController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: productDetailsController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.productDetails().productDetailsController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'productDetailsController' could not be loaded from storyboard 'ProductDetails' as 'ProductDetailsController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct qrScanResult: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "QRScanResult"
      let qrScanResultViewController = StoryboardViewControllerResource<QRScanResultViewController>(identifier: "QRScanResultViewController")
      
      func qrScanResultViewController(_: Void = ()) -> QRScanResultViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: qrScanResultViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "continue_arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'continue_arrow' is used in storyboard 'QRScanResult', but couldn't be loaded.") }
        if UIKit.UIImage(named: "successfully_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'successfully_icon' is used in storyboard 'QRScanResult', but couldn't be loaded.") }
        if UIKit.UIImage(named: "user_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'user_icon' is used in storyboard 'QRScanResult', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.qrScanResult().qrScanResultViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'qrScanResultViewController' could not be loaded from storyboard 'QRScanResult' as 'QRScanResultViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct splash: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let name = "Splash"
      let splashViewController = StoryboardViewControllerResource<SplashViewController>(identifier: "SplashViewController")
      
      func splashViewController(_: Void = ()) -> SplashViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: splashViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Logo' is used in storyboard 'Splash', but couldn't be loaded.") }
        if UIKit.UIImage(named: "splash_image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'splash_image' is used in storyboard 'Splash', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.splash().splashViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'splashViewController' could not be loaded from storyboard 'Splash' as 'SplashViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct warranty: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = WarrantyViewController
      
      let bundle = R.hostingBundle
      let name = "Warranty"
      let warrantyViewController = StoryboardViewControllerResource<WarrantyViewController>(identifier: "WarrantyViewController")
      
      func warrantyViewController(_: Void = ()) -> WarrantyViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: warrantyViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.warranty().warrantyViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'warrantyViewController' could not be loaded from storyboard 'Warranty' as 'WarrantyViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct warrantySearch: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = WarrantySearchViewController
      
      let bundle = R.hostingBundle
      let name = "WarrantySearch"
      let warrantySearchViewController = StoryboardViewControllerResource<WarrantySearchViewController>(identifier: "WarrantySearchViewController")
      
      func warrantySearchViewController(_: Void = ()) -> WarrantySearchViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: warrantySearchViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Scan", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Scan' is used in storyboard 'WarrantySearch', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Warranty-Search", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Warranty-Search' is used in storyboard 'WarrantySearch', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconfinder_radio-button_off", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconfinder_radio-button_off' is used in storyboard 'WarrantySearch', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconfinder_radio-button_on_", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconfinder_radio-button_on_' is used in storyboard 'WarrantySearch', but couldn't be loaded.") }
        if UIKit.UIImage(named: "scanner", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'scanner' is used in storyboard 'WarrantySearch', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.warrantySearch().warrantySearchViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'warrantySearchViewController' could not be loaded from storyboard 'WarrantySearch' as 'WarrantySearchViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct warrantySearchResult: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = WarrantySearchResultViewController
      
      let bundle = R.hostingBundle
      let name = "WarrantySearchResult"
      let warrantySearchResultViewController = StoryboardViewControllerResource<WarrantySearchResultViewController>(identifier: "WarrantySearchResultViewController")
      
      func warrantySearchResultViewController(_: Void = ()) -> WarrantySearchResultViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: warrantySearchResultViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.warrantySearchResult().warrantySearchResultViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'warrantySearchResultViewController' could not be loaded from storyboard 'WarrantySearchResult' as 'WarrantySearchResultViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct workshop: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = WorkshopViewController
      
      let bundle = R.hostingBundle
      let name = "Workshop"
      let workshopViewController = StoryboardViewControllerResource<WorkshopViewController>(identifier: "WorkshopViewController")
      
      func workshopViewController(_: Void = ()) -> WorkshopViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: workshopViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.workshop().workshopViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'workshopViewController' could not be loaded from storyboard 'Workshop' as 'WorkshopViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
